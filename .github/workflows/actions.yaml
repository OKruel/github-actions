#! EXAMPLE TO RUN ACTIONS
# Notice that the Actions DO NOT COPY the files from the repository to the Virtual Machine.
# This copy procedure must be done either manually or by bringing in the checkout action
# Github has an oficial ready to use Actions repository -> https://github.com/actions/
# Events that can trigger a workflow https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows

name: Actions workflow
# Object (can also be an array) that specifies in which External or Github EVENTS the jobs will be triggerred
on:
  # Events can be dispatch manually by making a post request to a URL.
  # The format of the url is: https://api.github.com/respos/<user>/<repository>/dispatches
  # This request Header must contain as Basic Authorization github token to access Github API.
  # This token can be generated in the settings -> developer settings > personal access tokens
  # Docs https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event
  repository_dispatch:
    # You can add any string here as a type.
    # In the body of the post request the string must be sent. {"event_type": "build"}
    types: [actions]

  # CRON Jobs - The schedule works exacty like Linux Cron jobs
  #? schedule:
  # CRON job utility tool -> https://crontab.guru/
  # Is possible to set several CRON jobs
  # Minimum time aceptable to GITHUB is 5min to 5min
  #? - cron: '0/5 * * * *'
  #? - cron: '* * * * * '

  # Every push (branch not specified) will trigger the jobs
  #? push:

  # Trigger by push events to a specific branch
  # All the options to trigger events can be used also with pull request
  push:
    #! branches and branches-igonore can not be used at the same time
    branches:
      - master
      # All branches that obey the following regex pattern
      # https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - 'feature/*'
      - 'feature/**' # will match nestes branch names
      - '!NotWantedPattern' # Exclamation in the begin indicates to IGNORE branch with this patterns
    # Will run on all branch except the ones listed here
    # A regex pattern can also be used
    #? branches-ignore:
    #? - development
    # Tags works EXACTLY the same as branches.
    tags:
      - v1.*
    # Paths indicate certain types of files that must be changed to trigger the workflow
    # Regex patterns and path-ignore can also be used
    #! Branches and tags will trigger if ONE of their options are true.
    #! Path are excludent. If the PATH is not true event if BRANCHES and TAGS are try nothing will be triggered
    paths:
      - '**.js'
      - '**.*'

  #! IMPORTANT - When a PR is open Github will create internally a REF branch version .
  #! The REF consists in an actual merge.
  #! The JOBS will then run in the MERGED CODE
  #! This happens for all types in pull_request
  pull_request:
    # Triggering the jobs by pull requests events.
    types: [closed, assigned, opened, reopened]
    # Triggering the jobs by specific branches
    branches:
      - master

jobs:
  github-actions:
    runs-on: ubuntu-latest
    steps:
      # [ACTION 1] Copies all files to inside the github virtual machine
      - name: Github CHECKOUT ACTION - bring in the repo files
        # Name of the repository to use the code.
        uses: actions/checkout@v2.4.0 # <user/repository>@<EITHER VERSION OR COMMIT OR BRANCH>

      # [COMMAND] Check if the my repository files are inside the virtual machine after CHECKOUT ACTION
      - name: AFTER CHECKOUT ACTION - List files inside the virtual machine
        run: |
          pwd
          ls -la

      # [ACTION 2] Receives and input and print it to the console
      - name: Simple Javascript Action
        # Code inside a repository to execute/build/test
        uses: actions/hello-world-javascript-action@v1 # <user/repository>@<EITHER VERSION OR COMMIT OR BRANCH>
        # ID given to identify this repo in future jobs/steps in this file
        id: greet
        # Actions can take inputs. You can instructions in the repository
        with:
          # This is the input
          who-to-greet: Olavo

      #[COMMAND] Command to test the sintax to acces other steps from this workflow
      - name: Log the time of the Greeting
        # Steps becomes an object that can be accessed through the following syntax
        run: echo "${{ steps.greet.outputs.time }}"
