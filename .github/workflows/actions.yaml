# EXAMPLE TO RUN ACTIONS
# Notice that the Actions DO NOT COPY the files from the repository to the Virtual Machine.
# This copy procedure must be done either manually or by bringing in the checkout action

name: Actions workflow
# Object (can also be an array) that specifies in which Github EVENTS the jobs will be triggerred
on:
  push:
  pull_request:
    types: [closed, assigned, opened, reopened]

jobs:
  github-actions:
    runs-on: ubuntu-latest
    steps:
      # Check if the repository files are inside the virtual machine
      - name: BEFORE CHECKOUT ACTION - List files inside the virtual machine
        run: |
          pwd
          ls -la

      # Bring in the action that copies the files to the virtual machine,
      - name: Github CHECKOUT ACTION - bring in the repo files
        uses: actions/checkout@v2.4.0 # <user/repository>@<EITHER VERSION OR COMMIT OR BRANCH>

      # Check if the repository files are inside the virtual machine after CHECKOUT
      - name: AFTER CHECKOUT ACTION - List files inside the virtual machine
        run: |
          pwd
          ls -la
      # name of the step
      - name: Simple Javascript Action
        # Code inside a repository to execute/build/test
        uses: actions/hello-world-javascript-action@v1 # <user/repository>@<EITHER VERSION OR COMMIT OR BRANCH>
        # ID given to identify this repo in future jobs/steps in this file
        id: greet
        # Actions can take inputs. You can instructions in the repository
        with:
          # This is the input
          who-to-greet: Olavo

      # - name: Log the time of the Greeting
      #   # Steps becomes a bash object that can be accessed through that syntax
      #   run: ${{ steps.greet.outputs.time }}
