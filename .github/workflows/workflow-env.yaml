name: Workflow Environment Variables

on:
  push:
    branches:
      - master
  repository_dispatch:
    types: [environments]
# Environment variable has scopes. It can be global, job scoped or step scoped.
env:
  WF_ENV: Environment variable available for all jobs
  # Environment variables can be set inside Github's repository.
  # Those variables are encripted
  #! <username>/<repository>/settings/secrets/actions
  WF_ENV_FROM_GITHUB: ${{ secrets.WF_ENV_FROM_GITHUB }}

jobs:
  workflow_env_variables:
    runs-on: ubuntu-latest
    env:
      JOB_ENV: Environment variable available only in THIS JOB
    steps:
      - name: Configured in file env variables
        env:
          STEP_ENV: Environment variable available only in this STEP
        run: |
          echo "WL_ENV: ${WF_ENV}"
          echo "JOB_ENV: ${JOB_ENV}"
          echo "STEP_ENV: ${STEP_ENV}"
          echo "${{ github.event.client_payload.env }}"

      - name: Configured in GITHUB env variables
        run: |
          echo "WF_ENV_FROM_GITHUB: ${{ secrets.WF_ENV_FROM_GITHUB }}"
      # [COMMAND]
      # Environment variables automatically created in the virtual machine by Github
      # https://docs.github.com/en/actions/learn-github-actions/environment-variables
      - name: Default Github env Variables
        run: |
          echo "HOME: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
          echo "GITHUB_SHA: ${GITHUB_SHA}"
          echo "GITHUB_REF: ${GITHUB_REF}"

  #! ANOTHER JOB
  Decrypt_file_job:
    runs-on: ubuntu-latest
    steps:
      # Github setup action to copy the repo into the VM
      - uses: actions/checkout@v2.4.0

      # Command to descrypt the file with the secret
      - name: Command to decrypt file
        env:
          PASSPHRASE: ${{ secrets.ENCRYPTION_PASSPHRASE }}
        # The quiet option is to prevent big output dialog in the logs
        # The batch option is to prevent interactions from the GPG command since we can't enter inputs
        # The yes option is to answer yes into any interaction that might occur
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output $HOME/secret.json secretToEncrypt.json.gpg

      # Check if the file was correctly decrypted
      - name: Confirming decryption
        run: cat $HOME/secret.json
